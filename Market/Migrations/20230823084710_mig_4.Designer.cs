// <auto-generated />
using System;
using Market.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Market.Migrations
{
    [DbContext(typeof(MarketDbContext))]
    [Migration("20230823084710_mig_4")]
    partial class mig_4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Market.Domain.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Password")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Market.Domain.Entities.Bonus_Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("Barkod")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.Property<int>("Bonus")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Barkod")
                        .IsUnique();

                    b.ToTable("Bonus_Cards");
                });

            modelBuilder.Entity("Market.Domain.Entities.Bonus_Card_Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<float?>("Amount")
                        .HasColumnType("real");

                    b.Property<int>("Bonus_CardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Bonus_CardId");

                    b.ToTable("Bonus_Card_Reports");
                });

            modelBuilder.Entity("Market.Domain.Entities.Cash", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("Number")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("Number");

                    b.ToTable("Cashes");
                });

            modelBuilder.Entity("Market.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Market.Domain.Entities.Check", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<float?>("Add_Amount")
                        .HasColumnType("real");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int?>("Bonus_Amount")
                        .HasColumnType("int");

                    b.Property<int?>("Bonus_CardId")
                        .HasColumnType("int");

                    b.Property<int>("CashId")
                        .HasColumnType("int");

                    b.Property<int>("CheckNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Discount_CardId")
                        .HasColumnType("int");

                    b.Property<float?>("Final_Amount")
                        .HasColumnType("real");

                    b.Property<float?>("Out_Amount")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Bonus_CardId")
                        .IsUnique()
                        .HasFilter("[Bonus_CardId] IS NOT NULL");

                    b.HasIndex("CashId");

                    b.HasIndex("Discount_CardId")
                        .IsUnique()
                        .HasFilter("[Discount_CardId] IS NOT NULL");

                    b.ToTable("Checks");
                });

            modelBuilder.Entity("Market.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Market.Domain.Entities.Company_Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<float?>("Final_Debt")
                        .HasColumnType("real");

                    b.Property<float?>("First_Debt")
                        .HasColumnType("real");

                    b.Property<float?>("Our_Debt")
                        .HasColumnType("real");

                    b.Property<float?>("Us_Debt")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Company_Reports");
                });

            modelBuilder.Entity("Market.Domain.Entities.Cross.Cross_Account_Role", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("AccountId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("Cross_Account_Role");
                });

            modelBuilder.Entity("Market.Domain.Entities.Discount_Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("Barkod")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Fin")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Fin");

                    b.HasIndex("AccountId");

                    b.HasIndex("Barkod")
                        .IsUnique();

                    b.ToTable("Discount_Cards");
                });

            modelBuilder.Entity("Market.Domain.Entities.Included", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Buy_Amount")
                        .HasColumnType("real");

                    b.Property<float>("Buy_Price")
                        .HasColumnType("real");

                    b.Property<float?>("Concession")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<float?>("Discount")
                        .HasColumnType("real");

                    b.Property<float?>("Discount_Percentage")
                        .HasColumnType("real");

                    b.Property<float>("Final")
                        .HasColumnType("real");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("PaperId")
                        .HasColumnType("int");

                    b.Property<int>("Print_Number")
                        .HasColumnType("int");

                    b.Property<float>("Sale_Amount")
                        .HasColumnType("real");

                    b.Property<float>("Sale_Percentage")
                        .HasColumnType("real");

                    b.Property<float>("Sale_Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.HasIndex("PaperId");

                    b.ToTable("Includeds");
                });

            modelBuilder.Entity("Market.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int>("Barkod")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("Number")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<int>("Sub_CategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasIndex("AccountId");

                    b.HasIndex("Barkod")
                        .IsUnique();

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Sub_CategoryId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Market.Domain.Entities.Paper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<float?>("Concession")
                        .HasColumnType("real");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<float?>("Discount")
                        .HasColumnType("real");

                    b.Property<float>("Final_Amount")
                        .HasColumnType("real");

                    b.Property<int>("Paper_Number")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("Paper_Number");

                    b.HasIndex("AccountId");

                    b.ToTable("Papers");
                });

            modelBuilder.Entity("Market.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Market.Domain.Entities.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int>("CheckId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CheckId");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Market.Domain.Entities.Sub_Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Discount_Check")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Sub_Categories");
                });

            modelBuilder.Entity("Market.Domain.Entities.Visuals.CheckVisual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float?>("Add_Amount")
                        .HasColumnType("real");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int?>("Bonus_Amount")
                        .HasColumnType("int");

                    b.Property<int?>("Bonus_CardId")
                        .HasColumnType("int");

                    b.Property<int>("CashId")
                        .HasColumnType("int");

                    b.Property<int>("CheckNumber")
                        .HasColumnType("int");

                    b.Property<int?>("Discount_CardId")
                        .HasColumnType("int");

                    b.Property<float?>("Final_Amount")
                        .HasColumnType("real");

                    b.Property<float?>("Out_Amount")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("CheckVisuals");
                });

            modelBuilder.Entity("Market.Domain.Entities.Bonus_Card", b =>
                {
                    b.HasOne("Market.Domain.Entities.Account", "Account")
                        .WithMany("Bonus_Cards")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Market.Domain.Entities.Bonus_Card_Report", b =>
                {
                    b.HasOne("Market.Domain.Entities.Account", "Account")
                        .WithMany("Bonus_Card_Reports")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Market.Domain.Entities.Bonus_Card", "Bonus_Card")
                        .WithMany("Bonus_Card_Report")
                        .HasForeignKey("Bonus_CardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Bonus_Card");
                });

            modelBuilder.Entity("Market.Domain.Entities.Category", b =>
                {
                    b.HasOne("Market.Domain.Entities.Account", "Account")
                        .WithMany("Categorys")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Market.Domain.Entities.Check", b =>
                {
                    b.HasOne("Market.Domain.Entities.Account", "Account")
                        .WithMany("Checks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Market.Domain.Entities.Bonus_Card", "Bonus_Card")
                        .WithOne("Check")
                        .HasForeignKey("Market.Domain.Entities.Check", "Bonus_CardId");

                    b.HasOne("Market.Domain.Entities.Cash", "Cash")
                        .WithMany("Checks")
                        .HasForeignKey("CashId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Market.Domain.Entities.Discount_Card", "Discount_Card")
                        .WithOne("Check")
                        .HasForeignKey("Market.Domain.Entities.Check", "Discount_CardId");

                    b.Navigation("Account");

                    b.Navigation("Bonus_Card");

                    b.Navigation("Cash");

                    b.Navigation("Discount_Card");
                });

            modelBuilder.Entity("Market.Domain.Entities.Company", b =>
                {
                    b.HasOne("Market.Domain.Entities.Account", "Account")
                        .WithMany("Companies")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Market.Domain.Entities.Company_Report", b =>
                {
                    b.HasOne("Market.Domain.Entities.Account", "Account")
                        .WithMany("Company_Reports")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Market.Domain.Entities.Company", "Company")
                        .WithMany("Company_Report")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Market.Domain.Entities.Cross.Cross_Account_Role", b =>
                {
                    b.HasOne("Market.Domain.Entities.Account", "Account")
                        .WithMany("Cross_Account_Role")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Market.Domain.Entities.Role", "Role")
                        .WithMany("Cross_Account_Role")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Market.Domain.Entities.Discount_Card", b =>
                {
                    b.HasOne("Market.Domain.Entities.Account", "Account")
                        .WithMany("Discount_Cards")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Market.Domain.Entities.Included", b =>
                {
                    b.HasOne("Market.Domain.Entities.Item", "Item")
                        .WithOne("Included")
                        .HasForeignKey("Market.Domain.Entities.Included", "ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Market.Domain.Entities.Paper", "Paper")
                        .WithMany("Includeds")
                        .HasForeignKey("PaperId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Paper");
                });

            modelBuilder.Entity("Market.Domain.Entities.Item", b =>
                {
                    b.HasOne("Market.Domain.Entities.Account", "Account")
                        .WithMany("Items")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Market.Domain.Entities.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Market.Domain.Entities.Company", "Company")
                        .WithMany("Items")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Market.Domain.Entities.Sub_Category", "Sub_Category")
                        .WithMany("Items")
                        .HasForeignKey("Sub_CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("Sub_Category");
                });

            modelBuilder.Entity("Market.Domain.Entities.Paper", b =>
                {
                    b.HasOne("Market.Domain.Entities.Account", "Account")
                        .WithMany("Papers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Market.Domain.Entities.Sale", b =>
                {
                    b.HasOne("Market.Domain.Entities.Check", "Check")
                        .WithMany("Sales")
                        .HasForeignKey("CheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Market.Domain.Entities.Item", "Item")
                        .WithOne("Sale")
                        .HasForeignKey("Market.Domain.Entities.Sale", "ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Check");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Market.Domain.Entities.Sub_Category", b =>
                {
                    b.HasOne("Market.Domain.Entities.Account", "Account")
                        .WithMany("Sub_Categories")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Market.Domain.Entities.Category", "Category")
                        .WithMany("Sub_Categories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Market.Domain.Entities.Account", b =>
                {
                    b.Navigation("Bonus_Card_Reports");

                    b.Navigation("Bonus_Cards");

                    b.Navigation("Categorys");

                    b.Navigation("Checks");

                    b.Navigation("Companies");

                    b.Navigation("Company_Reports");

                    b.Navigation("Cross_Account_Role");

                    b.Navigation("Discount_Cards");

                    b.Navigation("Items");

                    b.Navigation("Papers");

                    b.Navigation("Sub_Categories");
                });

            modelBuilder.Entity("Market.Domain.Entities.Bonus_Card", b =>
                {
                    b.Navigation("Bonus_Card_Report");

                    b.Navigation("Check")
                        .IsRequired();
                });

            modelBuilder.Entity("Market.Domain.Entities.Cash", b =>
                {
                    b.Navigation("Checks");
                });

            modelBuilder.Entity("Market.Domain.Entities.Category", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Sub_Categories");
                });

            modelBuilder.Entity("Market.Domain.Entities.Check", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Market.Domain.Entities.Company", b =>
                {
                    b.Navigation("Company_Report");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Market.Domain.Entities.Discount_Card", b =>
                {
                    b.Navigation("Check")
                        .IsRequired();
                });

            modelBuilder.Entity("Market.Domain.Entities.Item", b =>
                {
                    b.Navigation("Included")
                        .IsRequired();

                    b.Navigation("Sale")
                        .IsRequired();
                });

            modelBuilder.Entity("Market.Domain.Entities.Paper", b =>
                {
                    b.Navigation("Includeds");
                });

            modelBuilder.Entity("Market.Domain.Entities.Role", b =>
                {
                    b.Navigation("Cross_Account_Role");
                });

            modelBuilder.Entity("Market.Domain.Entities.Sub_Category", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
